name: Deploy to Azure Container Instances
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY_NAME: itemflow1
  IMAGE_NAME: itemflow-api
  RESOURCE_GROUP: itemflow1
  CONTAINER_NAME: itemflow-api

jobs:
  build-and-deploy:
    environment: aci-deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image
      run: |
        echo "Building image with commit SHA: ${{ github.sha }}"
        
        # Build with no-cache to ensure fresh build
        docker build --no-cache -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
        
        echo "Pushing images..."
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
        
        echo "Images pushed successfully"

    # Verificar que la imagen se subió correctamente
    - name: Verify image in registry
      run: |
        az acr repository show-tags \
          --name ${{ env.REGISTRY_NAME }} \
          --repository ${{ env.IMAGE_NAME }} \
          --orderby time_desc \
          --top 5

    # Eliminar contenedor existente
    - name: Delete existing container instance
      run: |
        echo "Checking if container exists..."
        if az container show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} &>/dev/null; then
          echo "Container exists, deleting..."
          az container delete \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_NAME }} \
            --yes
          echo "Container deletion initiated"
        else
          echo "Container doesn't exist, skipping deletion"
        fi

    # Esperar a que se complete la eliminación
    - name: Wait for container deletion
      run: |
        echo "Waiting for deletion to complete..."
        # Esperar hasta que el contenedor ya no exista
        for i in {1..30}; do
          if ! az container show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} &>/dev/null; then
            echo "Container successfully deleted"
            break
          fi
          echo "Waiting... ($i/30)"
          sleep 3
        done

    # Deploy con Azure CLI para mejor control
    - name: Deploy to Azure Container Instances
      run: |
        echo "Creating new container instance with image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        
        az container create \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }} \
          --image ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
          --registry-login-server ${{ env.REGISTRY_NAME }}.azurecr.io \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --dns-name-label flask-app-${{ github.run_number }} \
          --ports 5000 \
          --cpu 2 \
          --memory 2 \
          --location "East US 2" \
          --os-type Linux \
          --restart-policy Always \
          --environment-variables \
            DB_SERVER=${{ secrets.DB_SERVER }} \
            DB_NAME=${{ secrets.DB_NAME }} \
            DB_USER=${{ secrets.DB_USER }} \
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}

    # Verificar el estado del contenedor
    - name: Check container status
      run: |
        echo "Checking container status..."
        az container show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }} \
          --query "{name:name,state:containers[0].instanceView.currentState.state,image:containers[0].image}" \
          --output table

    # Mostrar logs si hay problemas
    - name: Show container logs
      if: failure()
      run: |
        echo "Attempting to show container logs..."
        if az container show --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }} &>/dev/null; then
          echo "Container logs:"
          az container logs \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_NAME }}
        else
          echo "Container not found, cannot show logs"
        fi

    - name: Logout from Azure
      run: az logout